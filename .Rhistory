x
set.seed(13434)
#Create a dataframe with sample variables
x<-data.frame("var1"= sample(1:5), "var2" = sample(6:10))
x<-x[sample(1:5),]
x<-x$var2[c(1,3)] = NA
x
x<-x$var2[c(1,3)] = NA
x$var2[c(1,3)] = NA
?sample
y <- data.frame("var1"=sample(1:3))
y
y
y <- y[sample(1:3),]
y
x
y$var1[c(1,2)]=NA
y <- data.frame("var1"=sample(1:3), "var2"=sample(4:6))
y <- y[sample(1:3),]
y$var2[c(1,2)]=NA
y
?c
y$var1
y<-y[sample(2:3),]
y
y
y<-y[sample(1:3),]
y
?sample
y<-y[sample(1:3),]
y <- data.frame("var1"=sample(1:3), "var2"=sample(4:6))
y <- y[sample(1:3),]
y$var2[c(1,2)]=NA
y
set.seed(13434)
y <- data.frame("var1"=sample(1:3), "var2"=sample(4:6))
y <- y[sample(1:3),]
y$var2[c(1,2)]=NA
y
y <- data.frame("var1"=sample(1:3), "var2"=sample(4:6))
y
y <- y[sample(1:3),]
y <- y[sample(1:3),]
y
y <- y[sample(1:5),]
y
q()
x= 2:5
p=(1:4) / 10
rbind(x,p)
expected <- sum(x^2*p)
expectedv <- sum(x*p)^2
expected
expectedv
ans <- expected - expectedv
ans
?qunif
x <- 1:4
p <- x/sum(x)
sum(x^2*p)+sum(x*p)^2
m <- mean(c(x,p))
m
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
Xmean <- sum(temp["X",] * temp["Prob",])
#sum of x times sum of prob
Xmean
Ppregnant_pos = 0.75*0.30/(0.75*0.30+0.48*0.70)
round(Ppregnant_pos*100)
Ppregnant_pos
targetDBP <- 70
μ <- 80
σ <- 10
percentage <- round(pnorm(targetDBP, mean = μ, sd = σ) * 100)
percentage
?hist
setwd("~/Local R")
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip "
download.file(url, destfile =activity.csv )
read.csv("activity.csv")
activitydata<-read.csv("activity.csv")
str(activitydata)
totalsteps <- sum(activitydata$steps)
?sum
totalsteps <- sum(activitydata$steps, na.rm = TRUE)
totalsteps
?hist
hist <- hist(totalsteps)
?hist
hist1 <- hist(totalsteps)
hist1 <- hist(totalsteps, day)
str(activitydata)
activitydata$converted <- as.Date(dates$Date, format="%Y-%m-%d")
activitydata$converted <- as.Date(date$Date, format="%Y-%m-%d")
activitydata$converted <- as.Date(activitydata$date, format="%Y-%m-%d")
activitydata$converted
?hist
ggplot(activitydata, aes(x=converted)) + geom_histogram() + opts(axis.text.x = theme)text(angle=90))
ggplot(activitydata, aes(x=converted)) + geom_histogram() + opts(axis.text.x = theme_text(angle=90))
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
library(ggplot)
library(ggplot2)
ggplot(activitydata, aes(x=converted)) + geom_histogram() + opts(axis.text.x = theme_text(angle=90))\
ggplot(activitydata, aes(x=converted)) + geom_histogram() + opts(axis.text.x = theme_text(angle=90))
ggplot(activitydata, aes(x=converted)) + geom_histogram()
ggplot(activitydata, aes(x=converted)) + geom_histogram() + bin inwidth = x)
ggplot(activitydata, aes(x=converted))
library(knitr)
library(data.table)
library(ggplot2)
opts_chunk$set(echo = TRUE, results = 'hold')       #Define Text results. Echo all results and hold output pieces and push them
ggplot(activitydata, aes(x=converted)) +
)
str(activitydata)
head(activitydata,5)
str(activitydata)
url <- "https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip "
download.file(url, destfile =activity.csv )
activitydata<-read.csv("activity.csv", header = TRUE, sep = ",", colClasses = c("numeric","character","numeric"))
activitydata$newdate <- as.Date(activitydata$date, format="%Y-%m-%d")
activitydata$interval <- as.factor(activitydata$interval)
total_steps_day <- aggregate(steps ~ date, activitydata, sum)
head(activitydata)
colnames(total_steps_day) <-c("date", "steps")
head(activitydata)
head(total_steps_day)
class(total_steps_day)
head(total_steps_day,10)
ggplot(total_steps_day, aes(x = steps_)) + geom_histogram(bindwidth = 1000) + labs(title="Activity: Steps per Day", x = "Number of Steps per Day", y = "Number of times in day(Count)")
ggplot(total_steps_day, aes(x = steps)) + geom_histogram(bindwidth = 1000) + labs(title="Activity: Steps per Day", x = "Number of Steps per Day", y = "Number of times in day(Count)")
ggplot(total_steps_day, aes(x = steps)) + geom_histogram(bindwidth = x) + labs(title="Activity: Steps per Day", x = "Number of Steps per Day", y = "Number of times in day(Count)")
ggplot(total_steps_day, aes(x = steps)) + geom_histogram(bindwidth = x) + labs(title="Activity: Steps per Day", x = "Number of Steps per Day", y = "Number of times in day(Count)")
total_steps_mean <- mean(total_steps_day$steps, na.rm = TRUE)
total_steps_median <- median(total_steps_day$steps, na.rm = TRUE)
total_steps_mean
str(activitydata)
head(activitydata)
setwd("~/Local R")
knit2html("RepData_PeerAssessment1.Rmd"")
""
knit2html("RepData_PeerAssessment1.Rmd")
setwd("~/Local R")
setwd("~/Local R/RepData_PeerAssessment1")
time_seris2 <- aggregate(activitydata$steps, by.list(interval = activitydata$interval),              FUN=MEAN, na.rm = TRUE)
ggplot(time_seris2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern", x="Interval", y="Number of steps") +
theme_bw() #white background
time_seris2 <- aggregate(activitydata$steps, by.list(interval = activitydata$interval),              FUN=MEAN, na.rm = TRUE)
time_seris2 <- aggregate(activitydata$steps, by.list(interval = activitydata$interval),              FUN=mean, na.rm = TRUE)
time_seris2 <- aggregate(activitydata$steps, by=list(interval = activitydata$interval),              FUN=mean, na.rm = TRUE)
time_seris2
ggplot(time_seris2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="Interval", y="Number of steps") +
theme_bw()
colnames(time_seris2) <- c("interval", "steps")
ggplot(time_seris2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="Interval", y="Number of steps") +
theme_bw() #white background
time_seris2  <- as.integer(levels(time_seris2$interval)[time_seris2$interval])
ggplot(time_seris2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="Interval", y="Number of steps") +
theme_bw() #white background
time_seris2 <- aggregate(activitydata$steps, by = list(interval = activitydata$interval),                FUN=mean, na.rm = TRUE)
colnames(time_seris2) <- c("interval", "steps")
#Steps per interval
time_series2 <- aggregate(activitydata$steps, by = list(interval = activitydata$interval),                FUN=mean, na.rm = TRUE)
colnames(time_series2) <- c("interval", "steps")
rm(time_seris2)
time_series1 <- tappply(activitydata$steps, activitydata$interval, mean, na.rm = TRUE)
plot(row.names(time_series1), time_series, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "red")
time_series1 <- tapply(activitydata$steps, activitydata$interval, mean, na.rm = TRUE)
plot(row.names(time_series1), time_series1, type = "l", xlab = "5-min interval",
ylab = "Average across all Days", main = "Average number of steps taken",
col = "red")
time_series1
head(time_series1)
ggplot(time_series1, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="5-min Interval", y="Average Steps on all Days") +
theme_bw() #white background
steps_per_interval <- aggregate(rdata$steps,
by = list(interval = rdata$interval),
FUN=mean, na.rm=TRUE)
#convert to integers
##this helps in plotting
steps_per_interval$interval <-
as.integer(levels(steps_per_interval$interval)[steps_per_interval$interval])
colnames(steps_per_interval) <- c("interval", "steps")
time_series2 <- aggregate(activitydata$steps, by = list(interval = activitydata$interval),                FUN=mean, na.rm = TRUE)
colnames(time_series2) <- c("interval", "steps")
ggplot(time_series1, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="5-min Interval", y="Average Steps on all Days") +
theme_bw() #white background
ggplot(time_series2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="5-min Interval", y="Average Steps on all Days") +
theme_bw() #white background
head(activitydata$steps)
activitydata<-read.csv("activity.csv", header = TRUE, sep = ",", colClasses = c("numeric","character","numeric"))
time_series2 <- aggregate(activitydata$steps, by = list(interval = activitydata$interval),                FUN=mean, na.rm = TRUE)
colnames(time_series2) <- c("interval", "steps")
ggplot(time_series2, aes(x=interval, y=steps)) + geom_line(color = "red", size=1) +
labs(title="Average Daily Activity Pattern:Steps", x="5-min Interval", y="Average Steps on all Days") +
theme_bw() #white background
which.is.max(time_series2)
max(time_series2)
max_interval <- timeseries2[which.max(timeseries2$steps,)]
max_interval <- time_series2[which.max(time_series2$steps,)]
max_interval <- time_series2[which.max(time_series2$steps),]
max_interval
time_series2[2]
time_series2[1,2]
time_series2[1,2:3]
time_series2[1:10,2]
time_series2[1:10,1]
is.na(activitydata)
anyNA(activitydata)
colMeans(is.na(activitydata))*100
missingvalue <- sum(is.na(activitydata$steps))
missingvalue
